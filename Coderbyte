Have the function CodelandUsernameValidation(str) take the str parameter being passed and determine if the string is a valid username according to the following rules:

1. The username is between 4 and 25 characters.
2. It must start with a letter.
3. It can only contain letters, numbers, and the underscore character.
4. It cannot end with an underscore character.


def CodelandUsernameValidation(strParam):

  # username is between 4 and 25 characters
  if len(strParam) < 4 or len(strParam) > 25 :
    return False

  # start with a letter
  if not str(strParam[0]).isalpha():
    return False;

  # can't end with an underscore
  if str(strParam[-1] ) == '_':
    return False;

  # contains only letters, numbers and underscore
  valid_grammar = set('abcdefghijklmnopqrstuvwxyz0123456789_')

  for ch in strParam:
    if ch.lower() not in valid_grammar:
      return False;


  return True

  return strParam








First Reverse

Have the function FirstReverse(str) take the str parameter being passed and return the string in reversed order. 
For example: if the input string is "Hello World and Coders" then your program should return the string sredoC dna dlroW olleH.



def FirstReverse(strParam):

  # code goes here
  word=''
  for letter in strParam:
    word= letter[::-1] + word
  return word

# keep this function call here 
print(FirstReverse(input()))






First Factorial

Have the function FirstFactorial(num) take the num parameter being passed and return the factorial of it. 
For example: if num = 4, then your program should return (4 * 3 * 2 * 1) = 24. 
For the test cases, the range will be between 1 and 18 and the input will always be an integer.




def FirstFactorial(num):

  # code goes here
  result = 1

  for i in range(num):
    result *= i + 1
  return result

# keep this function call here 
print(FirstFactorial(input()))




Longest Word

Have the function LongestWord(sen) take the sen parameter being passed and return the longest word in the string. 
If there are two or more words that are the same length, return the first word from the string with that length. 
Ignore punctuation and assume sen will not be empty. Words may also contain numbers, for example "Hello world123 567"


def LongestWord(sen):

  # code goes here

  lw= ""
  for letter in sen:
    if letter.isalpha() or letter.isnumeric():
      lw += letter
    else:
        lw = ''
  return max(lw.split(), key= len)


  return sen





Find Intersection
Have the function FindIntersection(strArr) read the array of strings stored in strArr which will contain 2 elements: 
the first element will represent a list of comma-separated numbers sorted in ascending order, 
the second element will represent a second list of comma-separated numbers (also sorted). 
Your goal is to return a comma-separated string containing the numbers that occur in elements of strArr in sorted order. 
If there is no intersection, return the string false.



def FindIntersection(strArr):

  # code goes here
  setOne = set(strArr[0].split(", "))
  setTwo = set(strArr[1].split(", "))

  result = sorted(list(setOne.intersection(setTwo)), key=lambda str: int(str))
    
  return ','.join(result) if len(result) > 0 else False
# keep this function call here 
print(FindIntersection(input()))




Questions Marks
Have the function QuestionsMarks(str) take the str string parameter, which will contain single digit numbers, 
letters, and question marks, and check if there are exactly 3 question marks between every pair of two numbers that add up to 10. 
If so, then your program should return the string true, otherwise it should return the string false. 
If there aren't any two numbers that add up to 10 in the string, then your program should return false as well.

For example: if str is "arrb6???4xxbl5???eee5" then your program should return true because there are exactly 
3 question marks between 6 and 4, and 3 question marks between 5 and 5 at the end of the string.



def QuestionsMarks(text):
  question_marks = 0
  last_number = 0
  found_any = False
  
  for c in text:
    if c.isdigit():
      n = int(c)
      if last_number + n == 10:
        found_any = True
        if question_marks != 3:
          return False
      question_marks = 0
      last_number = n
    elif c == '?':
      question_marks += 1
  return str(found_any).lower()

# keep this function call here 
print(QuestionsMarks(input()))

